//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/Scripts/Core/Input/Cheats.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace KrillOrBeKrilled.Core.Input
{
    public partial class @Cheats: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Cheats()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Cheats"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""f99f3259-b430-4745-a5f6-a7ba032e44e0"",
            ""actions"": [
                {
                    ""name"": ""TripleHold"",
                    ""type"": ""Button"",
                    ""id"": ""5e76120c-c03a-420a-b8b0-e52212648234"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuadHold"",
                    ""type"": ""Button"",
                    ""id"": ""d3cba411-2336-43e0-9df3-a0eceb209a1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d4a0359-2476-4d3d-b46b-ae2294230e87"",
                    ""path"": ""<Touchscreen>/touch3/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TripleHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dd3bf6f-fc60-4fe0-a42b-362d4116cb7d"",
                    ""path"": ""<Touchscreen>/touch4/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuadHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_TripleHold = m_UI.FindAction("TripleHold", throwIfNotFound: true);
            m_UI_QuadHold = m_UI.FindAction("QuadHold", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_TripleHold;
        private readonly InputAction m_UI_QuadHold;
        public struct UIActions
        {
            private @Cheats m_Wrapper;
            public UIActions(@Cheats wrapper) { m_Wrapper = wrapper; }
            public InputAction @TripleHold => m_Wrapper.m_UI_TripleHold;
            public InputAction @QuadHold => m_Wrapper.m_UI_QuadHold;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @TripleHold.started += instance.OnTripleHold;
                @TripleHold.performed += instance.OnTripleHold;
                @TripleHold.canceled += instance.OnTripleHold;
                @QuadHold.started += instance.OnQuadHold;
                @QuadHold.performed += instance.OnQuadHold;
                @QuadHold.canceled += instance.OnQuadHold;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @TripleHold.started -= instance.OnTripleHold;
                @TripleHold.performed -= instance.OnTripleHold;
                @TripleHold.canceled -= instance.OnTripleHold;
                @QuadHold.started -= instance.OnQuadHold;
                @QuadHold.performed -= instance.OnQuadHold;
                @QuadHold.canceled -= instance.OnQuadHold;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);
        public interface IUIActions
        {
            void OnTripleHold(InputAction.CallbackContext context);
            void OnQuadHold(InputAction.CallbackContext context);
        }
    }
}
