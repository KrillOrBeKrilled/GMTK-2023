using System.Collections;
using UnityEngine;
using UnityEngine.InputSystem.LowLevel;
using Object = UnityEngine.Object;

//*******************************************************************************************
// RecordingController
//*******************************************************************************************
namespace KrillOrBeKrilled.Core.Input {
    /// <summary>
    /// A subclass of <see cref="Player"/> that reads from files of recorded
    /// playtest sessions and recreates the scenario.
    /// </summary>
    public class RecordingController : PlayerController {
        [Tooltip("Reference to the recorded player input file to be parsed.")]
        public Object RecordingFile;
        [Tooltip("File path autogenerated from the RecordingFile.")]
        [SerializeField] private string _filePath;

        private InputEventTrace.ReplayController _replayController;

        //========================================
        // Unity Methods
        //========================================
        
        #region Unity Methods
        
        protected override void Awake() {
            this.ParseControls();
        }
        
        #endregion
        
        //========================================
        // Internal Methods
        //========================================
        
        #region Internal Methods
        
        /// <summary>
        /// Begins the recording playback with a slight delay.
        /// </summary>
        internal override void StartSession() {
            this.StartCoroutine(this.ReplayDelay());
        }
        
        /// <summary>
        /// Overrides <see cref="PlayerController.StopSession"/> to prevent the duplication of recording
        /// files.
        /// </summary>
        internal override void StopSession() {
            // Make this blank to prevent the creation of the input recording script from the parent class
        }
        
        #endregion

        //========================================
        // Private Methods
        //========================================
        
        #region Private Methods
        
        /// <summary>
        /// Parses the <see cref="RecordingFile"/> and stores the player input data via <see cref="InputEventTrace"/>.
        /// </summary>
        /// <remarks>
        /// If the file is invalid or the <see cref="InputEventTrace"/> could not register any input
        /// events, logs the error to the engine console.
        /// </remarks>
        private void ParseControls() {
            this.InputRecorder = InputEventTrace.LoadFrom(this._filePath);

            if (this.InputRecorder.eventCount < 1) {
                print("File empty or parse failed!");
            }
        }

        /// <summary>
        /// Begins replaying the player input data with timestamps to recreate the gameplay session as accurately
        /// as possible through the <see cref="InputEventTrace"/>.
        /// </summary>
        private void Replay() {
            print("Start Replay");
            this._replayController = this.InputRecorder.Replay();
            this._replayController.PlayAllEventsAccordingToTimestamps();
        }

        /// <summary>
        /// Delays for a duration of time and begins replaying the input recording data.
        /// </summary>
        /// <remarks> The coroutine is started by <see cref="StartSession"/>. </remarks>
        private IEnumerator ReplayDelay() {
            // Slight delay to give more precision to combat a margin of error in the timing of the execution
            // of events when yarn triggers "start_level" in the GameManager.
            yield return new WaitForSeconds(0.02f);
            this.Replay();
        }
        
        #endregion
    }
}
