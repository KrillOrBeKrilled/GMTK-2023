using System.Collections.Generic;
using UnityEngine;

//*******************************************************************************************
// Heatmap
//*******************************************************************************************
namespace Heatmaps {
    /// <summary>
    /// Parses csv files created from the UGS Analytics SQL Explorer queries of
    /// position data to generate a heatmap of
    /// <see cref="DataPoint">DataPoints</see> or clear an existing heatmap.
    /// </summary>
    /// <remarks> Position data may include: hero stuck positions, hero death positions,
    /// player deaths positions, etc. </remarks>
    public class Heatmap : MonoBehaviour {
        [Tooltip("Reference to the csv file to be parsed.")]
        public Object CSVFile;
        
        [Tooltip("List of file references that tracks previously parsed files.")]
        public List<Object> FilesParsed;

        [Tooltip("File path autogenerated from the CSVFile")]
        [SerializeField] private string _filePath;

        [Tooltip("Stores the DataPoints and updates them periodically.")]
        public DataPointCollection PointCollection;
        
        [Tooltip("The prefab of a data point to be instantiated for each position recorded in the CSVFile.")]
        public GameObject DataPoint;

        /// <summary>
        /// Parses the <see cref="CSVFile"/> from the autogenerated <see cref="_filePath"/>
        /// to extract position data, instantiating a new <see cref="DataPoint"/> under
        /// the <see cref="PointCollection"/> for each position.
        /// <p> Logs the file that was parsed for record keeping when aggregating data from multiple files. </p>
        /// </summary>
        /// <remarks> Invoked when the "Generate Heatmap" button is pressed in the inspector. </remarks>
        public void GenerateHeatmap() {
            var lines = System.IO.File.ReadAllLines(this._filePath);

            for (var lineNumber = 0; lineNumber < lines.Length; lineNumber++) {
                if (lineNumber < 1) 
                    continue;

                var elements = lines[lineNumber].Split(',');
                float.TryParse(elements[0], out var x);
                float.TryParse(elements[1], out var y);
                float.TryParse(elements[2], out var z);

                // Create a data point for each position on the map
                var point = Instantiate(this.DataPoint, new Vector3(x, y, z), Quaternion.identity);

                // Set the point's data and add the new point to a list of points
                point.transform.SetParent(this.PointCollection.transform);
            }

            this.FilesParsed.Add(this.CSVFile);
        }

        /// <summary>
        /// Clears the recorded <see cref="DataPoint">DataPoints</see> through <see cref="DataPointCollection"/>
        /// and empties <see cref="FilesParsed"/>.
        /// </summary>
        /// <remarks> Invoked when the "Clear Heatmap" button is pressed in the inspector. </remarks>
        public void ClearHeatmap() {
            this.PointCollection.ClearPoints();
            this.FilesParsed.Clear();
        }
    }
}
